we are given a string S representing a phone number, which we would like to reformat.
String S consist of N characters: digits, spaces, and/or dashes. It contains at least two digits.

spaces and dashes in string S can be ignored.
we want to reformat the given phone number in such a way that the digits are grouped in blocks
of length three, separated by single dashes. if necessary, the final block or the lasat two blocks can be length of two.

for example, given string S="00-4 48 5555 8361", we would like to format it as "004-448-555-583-61.

write a function: function solution(s);

that, given a string S representing a phone number, returns this phone number reformatted as described aboved.

for example, given S = "00-44 48 5555 8361", the function should return "004-448-555-583-61".
given S = "0 - 22 1985 --324", the function should return "022-198-53-24".
given S ="555372654", the function should return "555-372-654".

Assume that:
N is an integer within the range [2..100];
string S consist only of digits (0-9), spaces and/or dashes (-);
string S contains at least two digits.

function solution(S) {
  const digitsOnly = S.replace(/[\s-]/g, '');
  const n = digitsOnly.length;
  const numBlocks = Math.floor(n / 3);
  const finalBlockLength = n % 3 === 1 ? 4 : n % 3 === 2 ? 2 : 0;
  
  let result = digitsOnly.slice(0, 3);
  for (let i = 1; i < numBlocks; i++) {
    const blockStart = i * 3;
    const blockEnd = blockStart + 3;
    result += '-' + digitsOnly.slice(blockStart, blockEnd);
  }
  
  if (finalBlockLength > 0) {
    const finalBlockStart = numBlocks * 3;
    result += '-' + digitsOnly.slice(finalBlockStart, finalBlockStart + finalBlockLength);
  }
  
  return result;
}

