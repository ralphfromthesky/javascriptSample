you are given an implementation of a function: function solutin(a, b);

that, given a non-empty array A of N non-negative integers and a  non-empty array B of M
non-negative integers, returns the minimal value that occurs in both arrays. if there is no such value,
the function should return -1.

for example, given array A and B such that:

    A[0] = 1    B[0] = 4
    A[1] = 3    B[1] = 2
    A[2] = 2    B[2] = 5
    A[3] = 1    B[3] = 3
                B[4] = 2

your function should return 2, since 2 is the minimal value
which occurs in both arrays A and B (another value which occurs in both array is 3).

Given arrays A and B such that:

    A[0] = 2    B[0] = 3
    A[1] = 1    B[1] = 3

your function should return -1 and has test cases with maximum of 10, since there is no value occurs in both arrays.

the attached code is still incorrect for some inputs, Despite the error(s),
the code may produce a correct answer for the example test cases.
the goal of the exercise is to find and fix the bug(s) in the implementation.
you can modify at most two lines.

write an efficient algorith fot the following assumptions:

1. N and M are integers within the range [1..100,000];
2. each element of arrays A and B is an integer within the range [0..1,000,000,000];
